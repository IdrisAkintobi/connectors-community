# AWS REST Connector

This connector currently covers the following with the AWS REST APIs:

- Lambda
  - [Invoke Function](# https://docs.aws.amazon.com/lambda/latest/api/API_Invoke.html) - requires [lambda:InvokeFunction](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html) permission
- DynamoDB
  - [GetItem](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html) - requires dynamodb:GetItem or AmazonDynamoDBReadOnlyAccess for your instance

## Prerequisites

In order to "just use" the `.graphql` files in this folder, you will need to have AWS resources created that mirror how the connectors are designed. You can also modify the schema files to work with your existing resources (i.e. change the lambda url to have one of your function names in it and modify the selection to match what your lambda returns).

**For DynamoDB:**

1. Create a table called `product-catalog`
2. Create items in that table that contain an `id`_(string)_, `name`_(string)_, `description`_(string)_ and `image` _(string)_

**For Lambda:**

1. Create a lambda named "products" and have it return a body of products like below:

```
return {
  statusCode: 200,
  body: [{
    "id": "RANQi6AZkUXCbZ",
    "name": "OG Olive Putter - Blade",
    "description": "The traditional Block in a blade shape is made from a solid block of Olive wood. The head weight is approximately 360 grams with the addition of pure tungsten weights. Paired with a walnut center-line and white accents colors.",
    "image": "https://keynote-strapi-production.up.railway.app/uploads/thumbnail_IMG_9102_3119483fac.png"
  }],
};
```

2. Create a lambda named `product-price` and have it return a price object based on the incoming `product_id`:

```
const id = event.product_id;
const prices = [{
  id: "RANQi6AZkUXCbZ",
  price: {
    default_price: 49900,
    is_active: true,
    currency: "usd",
    billing_schema: "per_unit",
    recurring: {
      interval: 0,
      interval_count: 3,
    },
  },
}]
return prices.find((p) => p.id == id);
```

## Getting Started

1. If you haven't already, [create a new graph in GraphOS](https://www.apollographql.com/docs/graphos/get-started/guides/rest#step-1-set-up-your-graphql-api). Following the "Set up your local development environment" modal:
   a. Copy the `supergraph.yaml` and `router.yaml` files from this folder
   b. Copy the schema files you want to use for this connector (i.e. `lambda.graphql` and/or `dynamodb.graphql`) - _Note - if you only want to use one, you'll need to modify the `sueprgraph.yaml` file to only contain the schema file you want to use._
2. Setup a user in your IAM AWS Console and give them the appropriate permissions. You'll need to then set the proper environment variabels for [Sigv4 authentication](https://www.apollographql.com/docs/graphos/routing/security/subgraph-authentication#default-chain-authentication) - _see docs for `AWS_ROLE_ARN` configuration_:

```
# AWS Lambda - requires [InvokeFunction](https://docs.aws.amazon.com/lambda/latest/api/API_Invoke.html) permission
# DynamoDB - requires [GetItem](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html) permission

export AWS_ACCESS_KEY_ID=....
export AWS_SECRET_ACCESS_KEY=....
```

_Note - you can look at the `router.yaml` file to see config options for Sigv4 in the comments_

3. Run `rover dev` to start the local development session:

```
APOLLO_KEY=service:My-Graph-s1ff1u:•••••••••••••••••••••• \
  APOLLO_GRAPH_REF=My-Graph-s1ff1u@main \
  rover dev --supergraph-config supergraph.yaml --router-config router.yaml
```

Now you’re all set! Open up http://localhost:4000 to query your graph using Apollo Sandbox.

### Adding to an existing graph in GraphOS

1. Ensure you setup Sigv4 for your hosted router and configure in the `router.yaml` as outlined in the Getting Started seciton ([docs](https://www.apollographql.com/docs/graphos/routing/security/subgraph-authentication#default-chain-authentication)).

2. Simply publish the `.graphql` schema file to your graph ref like you would with any subgraph:

```
APOLLO_KEY=service:My-Graph-s1ff1u:•••••••••••••••••••••• \
  rover subgraph publish My-Graph-s1ff1u@main --name lambda --schema lambda.graphql --routing-url http://lambda
```

## Additional Setup for VS Code Task runner

Edit your `.vscode/settings.json` to include the Strapi specific keys

```
{
  "terminal.integrated.profiles.osx": {
    "graphos": {
      "path": "zsh",
      "args": ["-l"],
      "env": {
        "API_KEY": "",
        "APOLLO_KEY": "",
        ...
      }
    }
  },
  "terminal.integrated.defaultProfile.osx": "graphos"
}

```

Then you can execute the "Tasks: Run Task" command in VS code to execute the `rover dev` task or simply open a new terminal window in vscode with the `graphos` profile, then you can simply run `rover dev --supergraph-config supergraph.yaml --router-config router.yaml`.

## Contributing

You can contibute any of the AWS resources into this project. The functionality should be isolated to a `.graphql` file that represents the AWS resource.
