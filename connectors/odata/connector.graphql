extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.10", import: ["@key", "@requires"])
  @link(
    url: "https://specs.apollo.dev/connect/v0.1"
    import: ["@source", "@connect"]
  )
  @source(
  name: "TripPin"
  http: {
    baseURL: "https://services.odata.org/V4/"
  }
)

type Person {
  id: ID!
  firstName: String
  lastName: String
  gender: String
  emails: [String]
  address: Address
  concurrency: Float
}

type Address {
  state: String
  city: String
  country: String
  street: String
}

type Mutation {
  createPerson(username: ID!, firstName: String, lastName: String): Person
    @connect(
      source: "TripPin"
      http: { 
        POST: "(S(unfmciiartlvloowd54bozof))/TripPinServiceRW/People/"
        body: """
          $args {
            Username: username
            FirstName: firstName
            LastName: lastName
          }
        """
      }
      selection: """
        $.value {
          id: UserName
          firstName: FirstName
          lastName: LastName
          emails: [String]
      """
    )
updatePerson(username: ID!, updates: PersonUpdates): PersonUpdatesResponse
  @connect(
    source: "TripPin"
    http: { 
      PATCH: "(S(unfmciiartlvloowd54bozof))/TripPinServiceRW/People('{$args.username}')"
      body: """
        $args {
          Username: username
          FirstName: updates.firstName
          LastName: updates.lastName
        }
      """
    }
    selection: """
      $.value {
        success: $(true) 
        message: $("User deleted")
      }
    """
  )
}

type PersonUpdatesResponse {
  success: Boolean
  message: String
}

input PersonUpdates {
  firstName: String
  lastName: String
}

type Query {
  person(id:ID!): Person
    @connect(
      source: "TripPin"
      http: { GET: "(S(unfmciiartlvloowd54bozof))/TripPinServiceRW/People/{$args.id}" }
      selection: """
        $.value {
          id: UserName
          firstName: FirstName
          lastName: LastName
          gender: Gender
          emails: Emails
          address: AddressInfo->first {
            street: Address
            country: City.CountryRegion
            city: City.Name
            state: City.Region
          }
          concurrency: Concurrency
        }
      """
    )
  people: [Person]
    @connect(
      source: "TripPin"
      http: { GET: "(S(unfmciiartlvloowd54bozof))/TripPinServiceRW/People" }
      selection: """
        $.value {
          id: UserName
          firstName: FirstName
          lastName: LastName
          gender: Gender
          emails: Emails
          address: AddressInfo->first {
            street: Address
            country: City.CountryRegion
            city: City.Name
            state: City.Region
          }
          concurrency: Concurrency
        }
      """
    )
}